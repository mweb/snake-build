== Communication

=== Server
There is a simple server implementation available which provides services to a
client. The message handling is completely implemented and there is nothing the
user has to take care of. See the python doc of the server to see how to use it.

TODO

=== Client
TODO

=== Protocols
The server and client provide the possibility of communicating over different 
protocols. Currently only the json protocol is supported. The content of the 
data must always be the same.
Each message command or answer always consists of two parts: the first is the
command identifier which is a simple string (not case sensitive) and the
parameters for the command which is a structure that can be represented with
the python standard elements such as dictionary, list or simple types like:
int, float, string or boolean.

==== Message Types
Currently only the sjson (snake-build json) message type is supported but 
other might follow if required.

===== sjson
The following picture shows the message structure of a simple request.

.Message Structure
----
| |    | ... |
 |   |    \----> The data bytes as a json string (must be complete)
 |   |           the length must comply with the length given in the
 |   |           length field.
 |   \---------> The length field (4 bytes) specifying the length of
 |               the message. Must be encoded as big-endian.
 \-------------> The identifier byte (must be 'a' or as value 0x61)
----

The first 5 bytes are used for the header of the message. The data of the 
message must be a normal json string with the right encoding. (UTF-8)

Since the data is encoded as json it must be stored as a dictionary with at
least two keys: "cmd" and "parameters", all other keys will be ignored.

.Data Example
----
{
  "cmd" : "test",
  "parameters" : { "value1" : 1, "value2" : 2 }
}
----

