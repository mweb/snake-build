#!/usr/bin/env python
#
# snakebuildgettext - carefully extract docstrings for Snakebuild
#
# Copyright 2011 Mathias Weber <mathew.weber@gmail.com> originally take from
# Mercurial project:
#
# Copyright 2009 Matt Mackall <mpm@selenic.com> and others
#
# This software may be used and distributed according to the terms of the
# GNU General Public License version 2 or any later version.

# The normalize function is taken from pygettext which is distributed
# with Python under the Python License, which is GPL compatible.

"""Extract docstrings from Snakebuild commands.

Compared to pygettext, this script knows about the cmdtable and table
dictionaries used by Mercurial, and will only extract docstrings from
functions mentioned therein.

Use xgettext like normal to extract strings marked as translatable and
join the message cataloges to get the final catalog.
"""

import os
import sys


def escape(value):
    ''' Escape special characters.

        @param value: The value to escape
        @return: The string with the special characters escaped.
    '''
    # The order is important, the backslash must be escaped first
    # since the other replacements introduce new backslashes
    # themselves.
    value = value.replace('\\', '\\\\')
    value = value.replace('\n', '\\n')
    value = value.replace('\r', '\\r')
    value = value.replace('\t', '\\t')
    value = value.replace('"', '\\"')
    return value


def normalize(value):
    ''' This converts the various Python string types into a format that
        is appropriate for .po files, namely much closer to C style.

        @param value: The string to translate
        @return: The string normalized
    '''
    lines = value.split('\n')
    if len(lines) == 1:
        value = '"' + escape(value) + '"'
    else:
        if not lines[-1]:
            del lines[-1]
            lines[-1] = lines[-1] + '\n'
        lines = map(escape, lines)
        lineterm = '\\n"\n"'
        value = '""\n"' + lineterm.join(lines) + '"'
    return value


def poentry(binary, cmd, param, value):
    ''' Get the poentry for print it to the console

        @param binary: The name of the binary that uses this translation
        @param cmd: The command which uses this text
        @param param: The name of the parameter that gets translated
        @param value: The text to translate.
        @return a printable string
    '''
    return ('#: {0}:{1}-{2}\n'
            'msgid {3}\n'
            'msgstr ""\n'.format(binary, cmd, param, normalize(value)))


def docstrings(binary, path):
    """Extract docstrings from shell command descriptions for the given shell
        command.
        @param binary: The name of the binary for the comment to simplify
                translation.
        @param path: The path where the files for the SHELL_COMMANDS can be
                found.
    """
    path = path.replace('/', '.')
    if path.endswith('.py'):
        path = path[:-3]
    __import__(path)
    from snakebuild.commands.handler import SHELL_COMMANDS, CMD_DESCRIPTION, \
            CMD_PARAM_LIST

    for key, value in SHELL_COMMANDS.iteritems():
        print poentry(binary, key, '', value[CMD_DESCRIPTION].strip())
        for param, value in value[CMD_PARAM_LIST]:
            print poentry(binary, key, param, value.strip())


if __name__ == "__main__":
    # It is very important that we import the Snakebuild modules from
    # the source tree where snakebuildgettext is executed. Otherwise we
    # might accidentally import and extract strings from a Snakebuild
    # installation mentioned in PYTHONPATH.
    sys.path.insert(0, os.getcwd())
    if len(sys.argv) != 3:
        print "start with binary name and path to the cmdlist imports"
        exit(-1)
    docstrings(sys.argv[1], sys.argv[2])
